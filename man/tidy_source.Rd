% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/replace_assignment_eq.R
\name{tidy_source}
\alias{tidy_source}
\title{Reformat R code while preserving blank lines and comments}
\usage{
tidy_source(source = "clipboard", comment = getOption("formatR.comment",
  TRUE), blank = getOption("formatR.blank", TRUE),
  arrow = getOption("formatR.arrow", FALSE),
  brace.newline = getOption("formatR.brace.newline", FALSE),
  indent = getOption("formatR.indent", 4), output = TRUE, text = NULL,
  width.cutoff = getOption("width"), ...)
}
\arguments{
\item{source}{a character string: location of the source code (default to be
the clipboard; this means we can copy the code to clipboard and use
\code{tidy_source()} without specifying the argument \code{source})}

\item{comment}{whether to keep comments (\code{TRUE} by default)}

\item{blank}{whether to keep blank lines (\code{TRUE} by default)}

\item{arrow}{whether to replace the assign operator \code{=} with \code{<-}}

\item{brace.newline}{whether to put the left brace \code{\{} to a new line
(default \code{FALSE})}

\item{indent}{number of spaces to indent the code (default 4)}

\item{output}{output to the console or a file using \code{\link{cat}}?}

\item{text}{an alternative way to specify the input: if it is \code{NULL},
the function will read the source code from the \code{source} argument;
alternatively, if \code{text} is a character vector containing the source
code, it will be used as the input and the \code{source} argument will be
ignored}

\item{width.cutoff}{passed to \code{\link{deparse}}: integer in [20, 500]
determining the cutoff at which line-breaking is tried (default to be
\code{getOption("width")})}

\item{...}{other arguments passed to \code{\link{cat}}, e.g. \code{file}
(this can be useful for batch-processing R scripts, e.g.
\code{tidy_source(source = 'input.R', file = 'output.R')})}
}
\value{
A list with components \item{text.tidy}{the reformatted code as a
  character vector} \item{text.mask}{the code containing comments, which are
  masked in assignments or with the weird operator}
}
\description{
This function returns reformatted source code; it tries to preserve blank
lines and comments, which is different with \code{\link{parse}} and
\code{\link{deparse}}. It can also replace \code{=} with \code{<-} where
\code{=} means assignments, and reindent code by a specified number of spaces
(default is 4).
}
\note{
Be sure to read the reference to know other limitations.
}
\examples{
messy = system.file("format", "messy.R", package = "formatR")
tidy_source(messy)

# if you've copied R code into the clipboard
if (interactive()) {
  tidy_source("clipboard")
  
  # write into clipboard again
  tidy_source("clipboard", file = "clipboard")
}
}
\references{
\url{http://yihui.name/formatR} (an introduction to this package,
  with examples and further notes)
}
\seealso{
\code{\link{parse}}, \code{\link{deparse}}
}
\author{
Yihui Xie <\url{http://yihui.name}> with substantial contribution
  from Yixuan Qiu <\url{http://yixuan.cos.name}> and a very very very miniscule
  change from James Balamuta <\url{http://thecoatlessprofessor.com}> to
  enable a reverse equation clean.
}
